# Generated by Django 4.1.7 on 2023-05-04 15:24

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import myapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('username', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('created_at', models.DateField(auto_now_add=True, null=True)),
                ('sport', models.CharField(blank=True, choices=[('CRICKET', 'Cricket'), ('FOOTBALL', 'Football'), ('VOLLEYBALL', 'Volleyball'), ('FIELD_HOCKEY', 'Field Hockey'), ('TENNIS', 'Tennis'), ('BASKETBALL', 'Basketball'), ('TABLE_TENNIS', 'Table Tennis'), ('BASEBALL', 'Baseball'), ('GOLF', 'Golf'), ('RUGBY', 'Rugby'), ('BADMINTON', 'Badminton'), ('AMERICAN_FOOTBALL', 'American Football'), ('SWIMMING', 'Swimming'), ('GYMNASTICS', 'Gymnastics'), ('CYCLING', 'Cycling'), ('ICE_HOCKEY', 'Ice Hockey'), ('HANDBALL', 'Handball'), ('ROCK_CLIMBING', 'Rock Climbing'), ('FRISBEE', 'Frisbee'), ('BOWLING', 'Bowling')], max_length=200, null=True)),
                ('playing_environment', models.CharField(blank=True, choices=[('INDOOR', 'Indoor'), ('OUTDOOR', 'Outdoor'), ('BOTH', 'Both')], max_length=100, null=True)),
                ('skill_level', models.CharField(blank=True, choices=[('BEGINNER', 'Beginner'), ('LOWER_INTERMEDIATE', 'Lower Intermediate'), ('INTERMEDIATE', 'Intermediate'), ('UPPER_INTERMEDIATE', 'Upper Intermediate'), ('ADVANCED', 'Advanced')], max_length=200, null=True)),
                ('motivation', models.CharField(blank=True, choices=[('FUN', 'Fun'), ('COMPETITION', 'Competition'), ('HEALTH', 'Health'), ('SOCIAL', 'Social'), ('OTHER', 'Other')], max_length=200, null=True)),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other')], max_length=100, null=True)),
                ('location_latitude', models.FloatField(blank=True, null=True)),
                ('location_longitude', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', myapp.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('game_id', models.AutoField(primary_key=True, serialize=False)),
                ('session_title', models.CharField(default='', max_length=50)),
                ('organisation', models.CharField(default='', max_length=50)),
                ('game_description', models.CharField(default='', max_length=50)),
                ('confirmed_players', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(22)])),
                ('start_time', models.TimeField(default='00:00:00')),
                ('end_time', models.TimeField(default='00:00:00')),
                ('date', models.DateField(default='2000-01-01')),
                ('sport', models.CharField(default='Cricket', max_length=50)),
                ('skill_rating', models.CharField(default='Other', max_length=50)),
                ('age_range', models.CharField(default='Other', max_length=50)),
                ('status', models.CharField(default='Not_Started', max_length=50)),
                ('location', models.CharField(max_length=200)),
                ('location_latitude', models.FloatField(blank=True, null=True)),
                ('location_longitude', models.FloatField(blank=True, null=True)),
                ('id', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.IntegerField(default='')),
                ('ranking', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_sent', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends_user_1', to=settings.AUTH_USER_MODEL)),
                ('user_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends_user_2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FavouriteGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DatesAvailable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(default='Other', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatLog',
            fields=[
                ('chat_id', models.AutoField(primary_key=True, serialize=False)),
                ('chat_content', models.CharField(max_length=500)),
                ('msg_date', models.DateField()),
                ('msg_time', models.TimeField()),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.game')),
            ],
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(('sport__in', ['Cricket', 'Football', 'Volleyball', 'Field Hockey', 'Tennis', 'Basketball', 'Table Tennis', 'Baseball', 'Golf', 'Rugby', 'Badminton', 'American Football', 'Swimming', 'Gymnastics', 'Cycling', 'Ice Hockey', 'Handball', 'Rock Climbing', 'Frisbee', 'Bowling'])), name='game: check_valid_sport'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(('skill_rating__in', ['Beginner', 'Lower Intermediate', 'Intermediate', 'Upper Intermediate', 'Advanced'])), name='game: check_valid_skill_level'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(('age_range__in', ['18-25', '26-35', '36-45', '46-55', '56-65', 'Over 65'])), name='game: check_valid_age_range'),
        ),
        migrations.AddConstraint(
            model_name='game',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['Not_Started', 'Started', 'Finished'])), name='game: check_valid_status'),
        ),
        migrations.AddConstraint(
            model_name='datesavailable',
            constraint=models.CheckConstraint(check=models.Q(('day__in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])), name='days_available: check_valid_day'),
        ),
        migrations.AddConstraint(
            model_name='datesavailable',
            constraint=models.UniqueConstraint(fields=('user', 'day'), name='unique_user_day'),
        ),
    ]
